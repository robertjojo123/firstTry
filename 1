-- ‚úÖ **Function Forward Declarations**
local moveTo, saveProgress, loadProgress, placeBlock, buildSchematic, restock, refuelTurtle, findChestAccess, getChestYLevel, getBlockData, findPath

-- ‚úÖ **Restore Disk Startup for Future Turtles**
if peripheral.find("drive") then
    print("üîÑ Restoring disk startup...")
    if fs.exists("/disk/startuptemp.lua") then
        shell.run("mv /disk/startuptemp.lua /disk/startup.lua")
        print("‚úÖ Disk startup restored.")
    end
end

-- ‚úÖ **Load Progress or Set Default Start Position**
local function loadProgress()
    if fs.exists("progress.txt") then
        local file = fs.open("progress.txt", "r")
        local data = textutils.unserialize(file.readAll())  
        file.close()
        if data and data.index and data.pos then
            print("üîÑ Resuming from saved position:", data.pos.x, data.pos.y, data.pos.z)
            return data.index, data.pos
        end
    end
    print("‚úÖ No progress file found. Setting default start position.")
    return 1, {x = -5, y = 0, z = -5, dir = 0}  -- ‚úÖ Fixed Start Position
end

-- ‚úÖ **Save Progress Function**
local function saveProgress(index, position)
    local file = fs.open("progress.txt", "w")
    file.write(textutils.serialize({index = index, pos = position}))
    file.close()
end

-- ‚úÖ **Set Starting Position**
local buildIndex, pos = loadProgress()

-- ‚úÖ **Check if Turtle ID and Block Data Exist**
local turtleID = nil
if not fs.exists("turtle_id.txt") then
    print("üîç No Turtle ID found. Requesting one...")
    rednet.open("right")
    local _, receivedID = rednet.receive("turtle_id")
    if not receivedID then
        print("‚ùå Failed to receive Turtle ID. Exiting.")
        return
    end
    turtleID = receivedID
    local file = fs.open("turtle_id.txt", "w")
    file.write(tostring(turtleID))
    file.close()
    print("‚úÖ Received Turtle ID:", turtleID)
else
    local file = fs.open("turtle_id.txt", "r")
    turtleID = file.readAll()
    file.close()
    print("üîÑ Using stored Turtle ID:", turtleID)
end

-- ‚úÖ **Download Block Data if Missing**
if not fs.exists("output.lua") then
    local dataURL = "https://raw.githubusercontent.com/robertjojo123/limpy3/main/output_" .. turtleID .. ".lua"
    print("üåê Block data not found! Downloading:", dataURL)
    shell.run("wget " .. dataURL .. " output.lua")

    -- ‚úÖ **IMMEDIATE REFUEL AFTER DOWNLOADING BLOCK DATA**
    turtle.refuel(1)

    if not fs.exists("output.lua") then
        print("‚ùå Failed to download block data. Exiting.")
        return
    end
end

print("üîÑ Loading block data...")
local blocks = dofile("output.lua")

-- ‚úÖ **Refuel Function**
refuelTurtle = function()
    print("‚õΩ Checking fuel level...")
    if turtle.getFuelLevel() >= 1000 then return true end 

    print("üîÑ Moving to fuel chest...")
    local fuelChestPos = {x = 5, y = 0, z = -5}
    moveTo(fuelChestPos)
    findChestAccess(fuelChestPos)

    for i = 1, 2 do
        if turtle.suck(1) then
            turtle.refuel()
            print("‚úÖ Refueled with 1 Aeternus Fuel Block.")
        else
            print("‚ùå No fuel available! Stuck!")
            return false
        end
    end
    return true
end

-- ‚úÖ **Movement System**
local function turnLeft() turtle.turnLeft(); pos.dir = (pos.dir - 1) % 4 end
local function turnRight() turtle.turnRight(); pos.dir = (pos.dir + 1) % 4 end

moveTo = function(target)
    local retries = 0
    local lastPos = {x = pos.x, y = pos.y, z = pos.z, dir = pos.dir}

    while pos.x ~= target.x or pos.z ~= target.z or pos.y ~= target.y do
        -- ‚úÖ **Auto-Refuel if Needed**
        if turtle.getFuelLevel() < 1000 then
            print("‚õΩ Low Fuel! Going to refuel...")
            if not refuelTurtle() then return false end
            moveTo(lastPos)
            print("üîÑ Returned to previous position after refuel.")
        end

        -- ‚úÖ **Attempt to Move Forward**
        if turtle.forward() then
            if pos.dir == 0 then pos.z = pos.z - 1
            elseif pos.dir == 1 then pos.x = pos.x + 1
            elseif pos.dir == 2 then pos.z = pos.z + 1
            elseif pos.dir == 3 then pos.x = pos.x - 1
            end
            retries = 0 -- Reset retry counter on success
        else
            print("üöß Block detected! Trying to move up...")
            retries = retries + 1
            if retries < 10 then
                if turtle.up() then
                    pos.y = pos.y + 1
                end
            else
                print("üîÑ 10 tries failed! Sidestepping...")
                retries = 0
                turnRight()
                if turtle.forward() then
                    turnLeft()
                end
            end
        end
    end
    print("‚úÖ Arrived at:", target.x, target.y, target.z)
end

-- ‚úÖ **Build Process**
buildSchematic = function()
    print("üèó Starting build process...")
    for _, blockData in ipairs(blocks) do
        moveTo({x = blockData.x, y = blockData.y, z = blockData.z})
        while not placeBlock(blockData[1]) do
            print("üîÑ Retrying placement after restock")
        end
    end
    print("‚úÖ Build complete!")
end

buildSchematic()
