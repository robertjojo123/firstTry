-- ✅ **Function Forward Declarations**
local moveTo, saveProgress, loadProgress, placeBlock, buildSchematic, restock, refuelTurtle, findChestAccess, getChestYLevel, getBlockData, findPath

-- ✅ **Restore Disk Startup for Future Turtles**
if peripheral.find("drive") then
    print("🔄 Restoring disk startup...")
    if fs.exists("/disk/startuptemp.lua") then
        shell.run("mv /disk/startuptemp.lua /disk/startup.lua")
        print("✅ Disk startup restored.")
    end
end

-- ✅ **Load Progress or Set Default Start Position**
local function loadProgress()
    if fs.exists("progress.txt") then
        local file = fs.open("progress.txt", "r")
        local data = textutils.unserialize(file.readAll())  
        file.close()
        if data and data.index and data.pos then
            print("🔄 Resuming from saved position:", data.pos.x, data.pos.y, data.pos.z)
            return data.index, data.pos
        end
    end
    print("✅ No progress file found. Setting default start position.")
    return 1, {x = -5, y = 0, z = -5, dir = 0}  -- ✅ Fixed Start Position
end

-- ✅ **Save Progress Function**
local function saveProgress(index, position)
    local file = fs.open("progress.txt", "w")
    file.write(textutils.serialize({index = index, pos = position}))
    file.close()
end

-- ✅ **Set Starting Position**
local buildIndex, pos = loadProgress()

-- ✅ **Check if Turtle ID and Block Data Exist**
local turtleID = nil
if not fs.exists("turtle_id.txt") then
    print("🔍 No Turtle ID found. Requesting one...")
    rednet.open("right")
    local _, receivedID = rednet.receive("turtle_id")
    if not receivedID then
        print("❌ Failed to receive Turtle ID. Exiting.")
        return
    end
    turtleID = receivedID
    local file = fs.open("turtle_id.txt", "w")
    file.write(tostring(turtleID))
    file.close()
    print("✅ Received Turtle ID:", turtleID)
else
    local file = fs.open("turtle_id.txt", "r")
    turtleID = file.readAll()
    file.close()
    print("🔄 Using stored Turtle ID:", turtleID)
end

-- ✅ **Download Block Data if Missing**
if not fs.exists("output.lua") then
    local dataURL = "https://raw.githubusercontent.com/robertjojo123/limpy3/main/output_" .. turtleID .. ".lua"
    print("🌐 Block data not found! Downloading:", dataURL)
    shell.run("wget " .. dataURL .. " output.lua")
    if not fs.exists("output.lua") then
        print("❌ Failed to download block data. Exiting.")
        return
    end
end

print("🔄 Loading block data...")
local blocks = dofile("output.lua")

-- ✅ **Movement System (Fixed)**
local function turnLeft()
    turtle.turnLeft()
    pos.dir = (pos.dir - 1) % 4
end

local function turnRight()
    turtle.turnRight()
    pos.dir = (pos.dir + 1) % 4
end

moveTo = function(target)
    local retries = 0
    local lastPos = {x = pos.x, y = pos.y, z = pos.z, dir = pos.dir}

    while pos.x ~= target.x or pos.z ~= target.z or pos.y ~= target.y do
        -- ✅ Auto-Refuel if fuel is low
        if turtle.getFuelLevel() < 1000 then
            print("⛽ Low Fuel! Going to refuel...")
            local fuelChest = {x = 5, y = 0, z = -5}
            moveTo(fuelChest)
            findChestAccess(fuelChest)

            for i = 1, 2 do
                if turtle.suck(1) then
                    turtle.refuel()
                    print("⛽ Refueled with 1 Aeternus Fuel Block.")
                else
                    print("❌ No more fuel available! Stuck!")
                    return false
                end
            end

            -- ✅ Return to last position after refueling
            moveTo(lastPos)
            print("🔄 Returned to previous position after refuel.")
        end

        -- ✅ Attempt to move forward
        if turtle.forward() then
            if pos.dir == 0 then pos.z = pos.z - 1
            elseif pos.dir == 1 then pos.x = pos.x + 1
            elseif pos.dir == 2 then pos.z = pos.z + 1
            elseif pos.dir == 3 then pos.x = pos.x - 1
            end
            retries = 0 -- Reset retry counter on success
        else
            print("🚧 Block detected! Trying to move up...")
            retries = retries + 1
            if retries < 10 then
                if turtle.up() then
                    pos.y = pos.y + 1
                end
            else
                print("🔄 10 tries failed! Sidestepping...")
                retries = 0
                turnRight()
                if turtle.forward() then
                    turnLeft()
                end
            end
        end
    end

    print("✅ Arrived at:", target.x, target.y, target.z)
end

-- ✅ **Block Data Automation**
getBlockData = function(block)
    return "minecraft:" .. block
end

-- ✅ **Material Chest Storage Levels**
getChestYLevel = function(block)
    local blockYLevels = {
        ["wool"] = 1, ["grass"] = 2, ["dirt"] = 3, ["cobblestone"] = 4, ["clay"] = 5,
        ["stone"] = 6, ["sand"] = 7, ["glass"] = 8, ["oak_planks"] = 9, ["spruce_planks"] = 10, 
        ["bricks"] = 11, ["quartz_block"] = 12
    }
    return blockYLevels[block] or 13
end

-- ✅ **Restock Function**
restock = function(block)
    local blockID = getBlockData(block)
    local chestY = getChestYLevel(block)
    local chestPos = {x = 0, y = chestY, z = -5}  -- ✅ Material chests at (0,0,-5)

    print("🔄 Moving to restock", blockID)
    moveTo(chestPos)
    findChestAccess(chestPos)

    while not turtle.suck(64) do
        print("❌ No", blockID, "available! Retrying...")
        sleep(2)
    end

    print("✅ Restocked", blockID)
    return true
end

-- ✅ **Build Process**
buildSchematic = function()
    print("🏗 Starting build process...")
    for _, blockData in ipairs(blocks) do
        moveTo({x = blockData.x, y = blockData.y, z = blockData.z})
        while not placeBlock(blockData[1]) do
            print("🔄 Retrying placement after restock")
        end
    end
    print("✅ Build complete!")
end

buildSchematic()
